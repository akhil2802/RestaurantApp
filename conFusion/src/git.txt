git --version

git config --global user.name "akhil"
git config --global user.email "akhil28021996.18@gmail.com"
git config --list

git init
git status
git add .
git commit -m "inital commit"
git log
git log --oneline

first commit id: 77gh89
second: 98u6y8
third: 900cfcf

- Assume we're in third commit but we want the previous version(second):
git checkout 98u6y8
git commit -m "getting back to previous commit. this is current version                                on which we want to work on"
- Now, second commit becomes current version with new commit.
- To reset the changes we made by getting from third to second commit and making second as current version we use reset:
git  reset  HEAD  index.html  --> the file is in unstaged area and shows modified if we see the status. so to discard the changes in working directory use:
git checkout  --  index.html
- Now, we have restored to the end third commit. now third becomes current version as before.

NOte:
-------
* git reset <file> : unstage a staged file, but leave working directory unchanged.
* git reset : reset the staging area to the last commit without disturbing the working directory.

Set the local Git repository to set its remote origin:
    At the prompt, type the following to set up your local repository to link to your online Git repository:
- git remote add origin <repository URL>

Pushing your commits to the online repository:
    At the prompt, type the following to push the commits to the online repository:
- git push -u origin master

Cloning an online repository:
    To clone an online repository to your computer, type the following at the prompt:
- git clone <repository URL>

Conclusions:
* In this exercise you have learnt to set up an online Git repository, synchronize your local repository with the remote repository, and clone an online repository.
______________________________________________________________________

Node.js and NPM:
------------------------
package.json file: affords you a lot of great things like:
- it serves as documentation for what packages your proect depends on.
- it allows you to specify the versions of a packge that your project can use using semantic versioning rules.
- Make your build reproducible, which means that its way easier to share with other develoeprs.

Initializing package.json file:
- npm init --> asks for details and provide all of them.

Installing a liteserver module:
- npm install lite-server  --save-dev
here, --save-dev specifies this liteserver is used for development dependency for our project. it will be mentioned in package.json file.
- If we are installing node module on which our proect directly dependent on then we install it by just saying "--save" option not --save-dev. 

Exclude some of the folder, files while commiting to online git repository:
- here, we can exclude node_module folder which is being submitted to online git because we can get all the modules of node_module installed for us just by saying npm install.. this installs all the nodemodules present inside package.json file. If we say git commit then this node_modules folder wont be commited to repo.
-  create .gitignore file and mention node_modules inside this file. This will ignore node_modules folder from commit.

History:
-----------
 1  cd Desktop
    2  ls
    3  cd MeanStack_RestaurantApp/
    4  git status
    5  git push -u origin main
    6  git status
    7  git log --oneline
    8  cd Desktop
    9  cd MeanStack_RestaurantApp/
   10  ls
   11  git status
   12  git add .
   13  git commit -m "git text file added"
   14  git push
   15  git status
   16  git status
   17  ng --version
   18  npm init
   19  npm install lite-server --save-dev
   20  node update
   21  node help
   22  node install --update
   23  n prune
   24  npm install -g n
   25  npm -help
   26  npm update node
   27  node -v
   28  npm install -g npm
   29  npm install lite-server --save-dev
   30  npm fund
   31  npm start
   32  ls
   33  touch index.html
   34  npm start
   35  git status
   36  git add .
   37  git log --oneline"
   38  git log --oneline
   39  git commit -m "sample second commit"
   40  git push -u origin main
   41  git status
   42  history

   _________________________

   Scaffloding Angular Application:
   ---------------------
   npm install -g @angular/cli

   ng new conFusion --style=scss

   cd conFusion

   ng serve -open (or) 
   ng serve -o
   

Angulat Testing keywords:
------------------------
test-driven development. 
behavioural driven development

The first and foremost is that if your application
itself is implemented as various pieces,
like components, like services, like directives,
like the pipes that you are implementing within your application.
That means that you can easily test each of these individual units in isolation. 
 testing frameworks like "Jasmine"
 "describe" -> group tests, "it" -> individual test

 Once you've designed the test with the Jasmine framework,
Karma is a JavaScript based command line tool
that enables you to carry out these tests automatically.
Now, Karma together with Jasmine,
enables you to carry out tests for your angular application.
Now with Karma, what Karma supports,
is that it enables you to spawn
a web server within which you load your application source code and
then Karma then uses a browser to carry out the actual tests of your various units.
So this is where when you run your tests using Karma,
you will see Karma stacking up a browser,
whether it is a browser window of an existing browser or
whether you would use something called PhantomJS which starts
a phantom browser behind the scenes to carry out the test.
It doesn't matter, but Karma uses
the browser in one moment to carry out the test for your angular application.

the angular testing utilities provide
a test environment that enables you to carry
out the unit tests within your angular application.

So, this is where the interaction with the angular environment,
instead of using the real angular implementations,
you will use this test utilities that will provide
sufficient functionality to enable you to carry out the tests.
And this is where the TestBed that we will
use within our angular application is very, very useful.
The TestBed essentially creates an angular testing modular.
As you realize, your components don't exist by themselves.
Your components have to be included inside an NG module.
Now you can't simply use a standard NG module for carrying out your testing.
So that is where the TestBed,
that is supported by angular test utility,
provides you with an NG module environment that enables you to test their components.
So, within the TestBed,
you will use something called TestBed Create Component to create
an individual component and an instance of the component to carry out the tests on that.
And when you do that
the TestBed gives you access to something called the ComponentFixture,
the ComponentFixture is something that provides you a handle that enables you to surround
your component with enough functionality such that the component can be tested by itself.
The fixture provides access to the component itself and
then also through that we will use something called the DebugElement.
You will see me using that in the exercise that follows.
The DebugElement gives you access to the DOM,
that is the the template that is supported as part of your component.
So thereby, you can do manipulations on the DOM like clicking of elements in the DOM,
getting access to a DOM element and then reading out what is enclosed
inside those Dom elements and so on which will enable you to carry out the tests


